import time

import pyperclip
import streamlit as st
from PIL import Image

from ..requests.prediction import create_task, get_task_result

pyperclip.set_clipboard("xsel")


class Result:
    image = None,
    task_id: str | None = None,
    prediction: str | None = None


def predict(image):
    task_id = create_task(image.read(), image.name)
    if task_id:
        while st.session_state.result.prediction == None:
            time.sleep(1)
            st.session_state.result.prediction = get_task_result(task_id)
        st.rerun()


def show_latex_chat():
    st.title("Image to Latex –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å")
    st.caption("ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ c —Ñ–æ—Ä–º—É–ª–æ–π, –∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ Latex —Ç–µ–∫—Å—Ç–∞.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if "uploaded_image" not in st.session_state:
        st.session_state.uploaded_image = None
    if "result" not in st.session_state:
        st.session_state.result = Result()

    def copy_to_clipboard(text):
        pyperclip.copy(text)
        st.toast("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")

    upload_container = st.container()
    send_button_placeholder = st.empty()

    with upload_container:
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            type=["png"],
        )

        if uploaded_file is not None:
            st.session_state.uploaded_image = uploaded_file

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if st.session_state.uploaded_image is not None:
        if send_button_placeholder.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_button"):
            send_button_placeholder.empty()  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            image = st.session_state.uploaded_image
            st.session_state.uploaded_image = None
            st.session_state.result.prediction = None
            st.session_state.result.task_id = None
            st.session_state.result.image = image

            with st.spinner("–ú–æ–¥–µ–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", show_time=True):
                prediction = predict(image)

    if st.session_state.result.image is not None and st.session_state.result.prediction is not None:
        with st.chat_message("user"):
            st.image(Image.open(st.session_state.result.image), caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        with st.chat_message("assistant"):
            st.text("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            st.write(st.session_state.result.prediction)
            st.text("–§–æ—Ä–º—É–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Latex:")
            st.latex(st.session_state.result.prediction)

            # TODO: –ö–æ–¥ —Å–Ω–∏–∑—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ docker
            # if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key=f"copy"):
            #     copy_to_clipboard(st.session_state.result.prediction)
