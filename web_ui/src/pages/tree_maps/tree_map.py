import streamlit as st
import folium
from folium.plugins import MarkerCluster
import pandas as pd
import numpy as np
from streamlit_folium import st_folium
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
CIRCLE_RADIUS = 6

MAP_TILES = {
    "–¢—ë–º–Ω–∞—è (CartoDB Dark Matter)": "CartoDB dark_matter",
    "–°–≤–µ—Ç–ª–∞—è (CartoDB Positron)": "CartoDB positron",
}

@st.cache_data
def load_data(n_points=500):
    np.random.seed(42)
    today = pd.Timestamp.today()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –ø–æ—Å–∞–¥–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ª–µ—Ç
    planting_start = today - pd.DateOffset(years=100)
    planting_dates = pd.to_datetime(
        np.random.randint(planting_start.value // 10**9, today.value // 10**9, n_points), unit='s'
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3 –ª–µ—Ç)
    maintenance_start = today - pd.DateOffset(years=3)
    last_maintenance_dates = pd.to_datetime(
        np.random.randint(maintenance_start.value // 10**9, today.value // 10**9, n_points), unit='s'
    )

    data = {
        'lat': np.random.uniform(55.5, 56.5, n_points),
        'lon': np.random.uniform(37.3, 38.0, n_points),
        'type': np.random.choice(['–î—É–±', '–°–æ—Å–Ω–∞', '–ë–µ—Ä—ë–∑–∞', '–ö–ª—ë–Ω'], n_points),
        'planting_date': planting_dates,
        'last_maintenance': last_maintenance_dates,
        'crown_area': np.random.uniform(1, 50, n_points),
    }

    df = pd.DataFrame(data)
    df['id'] = df.index + 1  # ID –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1

    today = pd.Timestamp.today()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    df['age'] = df['planting_date'].apply(
        lambda d: today.year - d.year - ((today.month, today.day) < (d.month, d.day))
    )
    df['days_since_maintenance'] = (today - df['last_maintenance']).dt.days

    return df

def get_color_by_days(days):
    if days < 365:
        return 'green'
    elif days < 730:
        return 'yellow'
    else:
        return 'red'

def create_map(filtered_df):
    m = folium.Map(location=[55.7522, 37.6156], zoom_start=10, control_scale=True)

    for name, tile in MAP_TILES.items():
        folium.TileLayer(tile, name=name).add_to(m)

    marker_cluster = MarkerCluster(name="–î–µ—Ä–µ–≤—å—è").add_to(m)

    for _, row in filtered_df.iterrows():
        popup = folium.Popup(f"""
            <b>ID:</b> {row['id']}<br>
            <b>–¢–∏–ø:</b> {row['type']}<br>
            <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {row['age']} –ª–µ—Ç<br>
            <b>–î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</b> {row['days_since_maintenance']}<br>
            <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</b> {row['last_maintenance'].strftime('%d.%m.%Y')}<br>
            <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {row['lat']:.5f}, {row['lon']:.5f}<br>
            <b>–î–∞—Ç–∞ –ø–æ—Å–∞–¥–∫–∏:</b> {row['planting_date'].strftime('%d.%m.%Y')}<br>
            <b>–ü–ª–æ—â–∞–¥—å –∫—Ä–æ–Ω—ã:</b> {row['crown_area']:.1f} –º¬≤<br>
        """, max_width=300)

        color = get_color_by_days(row['days_since_maintenance'])

        folium.CircleMarker(
            location=[row['lat'], row['lon']],
            radius=CIRCLE_RADIUS,
            color=color,
            fill=True,
            fill_opacity=0.7,
            popup=popup
        ).add_to(marker_cluster)

    folium.LayerControl(position='topright').add_to(m)
    return m

def show_tree_map():
    st.title('üå≥ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–µ—Ä–µ–≤—å–µ–≤')
    st.markdown("### –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    df = load_data()

    with st.sidebar:
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        selected_types = st.multiselect(
            '–¢–∏–ø—ã –¥–µ—Ä–µ–≤—å–µ–≤',
            options=df['type'].unique(),
            default=list(df['type'].unique())
        )

        age_min, age_max = int(df['age'].min()), int(df['age'].max())
        age_range = st.slider(
            '–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)',
            min_value=age_min,
            max_value=age_max,
            value=(age_min, age_max)
        )

        crown_min, crown_max = float(df['crown_area'].min()), float(df['crown_area'].max())
        crown_size = st.slider(
            '–ü–ª–æ—â–∞–¥—å –∫—Ä–æ–Ω—ã (–º¬≤)',
            min_value=crown_min,
            max_value=crown_max,
            value=(crown_min, crown_max)
        )

        days_min, days_max = int(df['days_since_maintenance'].min()), int(df['days_since_maintenance'].max())
        days_range = st.slider(
            '–î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
            min_value=days_min,
            max_value=days_max,
            value=(days_min, days_max)
        )

    filtered_df = df[
        (df['type'].isin(selected_types)) &
        (df['age'].between(*age_range)) &
        (df['crown_area'].between(*crown_size)) &
        (df['days_since_maintenance'].between(*days_range))
    ]

    st.metric("–í—Å–µ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ", filtered_df.shape[0])

    st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤")

    map_obj = create_map(filtered_df)
    st_folium(map_obj, height=800, width=1200)

    st.markdown("### üü¢ –õ–µ–≥–µ–Ω–¥–∞ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é")
    legend_items = {
        '–ó–µ–ª—ë–Ω—ã–π (<1 –≥–æ–¥–∞)': 'green',
        '–ñ—ë–ª—Ç—ã–π (1‚Äì2 –≥–æ–¥–∞)': 'yellow',
        '–ö—Ä–∞—Å–Ω—ã–π (>2 –ª–µ—Ç)': 'red'
    }
    cols = st.columns(len(legend_items))
    for i, (label, color) in enumerate(legend_items.items()):
        cols[i].markdown(f"""
        <div style="display: flex; align-items: center;">
            <div style="width: 20px; height: 20px; background-color: {color}; margin-right: 10px;"></div>
            {label}
        </div>
        """, unsafe_allow_html=True)

    if st.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'):
        st.dataframe(filtered_df)

# –î–ª—è –∑–∞–ø—É—Å–∫–∞:
# show_tree_map()