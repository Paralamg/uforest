import streamlit as st
import folium
from folium.plugins import MarkerCluster
import pandas as pd
import numpy as np
from streamlit_folium import st_folium


@st.cache_data
def load_data(n_points=500):
    data = {
        'lat': np.random.uniform(55.5, 56.5, n_points),
        'lon': np.random.uniform(37.3, 38.0, n_points),
        'type': np.random.choice(['–î—É–±', '–°–æ—Å–Ω–∞', '–ë–µ—Ä—ë–∑–∞', '–ö–ª—ë–Ω'], n_points),
        'age': np.random.randint(1, 100, n_points),
        'crown_area': np.random.uniform(1, 50, n_points)
    }
    return pd.DataFrame(data)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
TYPE_COLORS = {
    '–î—É–±': '#1f77b4',
    '–°–æ—Å–Ω–∞': '#2ca02c',
    '–ë–µ—Ä—ë–∑–∞': '#d62728',
    '–ö–ª—ë–Ω': '#9467bd'
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
def create_map(filtered_df):
    m = folium.Map(location=[55.7522, 37.6156], zoom_start=10)
    marker_cluster = MarkerCluster().add_to(m)

    for _, row in filtered_df.iterrows():
        popup = folium.Popup(f"""
            –¢–∏–ø: {row['type']}<br>
            –í–æ–∑—Ä–∞—Å—Ç: {row['age']} –ª–µ—Ç<br>
            –ü–ª–æ—â–∞–¥—å –∫—Ä–æ–Ω—ã: {row['crown_area']:.1f} –º¬≤
        """, max_width=250)

        folium.CircleMarker(
            location=[row['lat'], row['lon']],
            radius=row['crown_area'] / 5,
            color=TYPE_COLORS[row['type']],
            fill=True,
            fill_opacity=0.7,
            popup=popup
        ).add_to(marker_cluster)

    return m

def show_tree_map():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
    st.title('üå≥ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–µ—Ä–µ–≤—å–µ–≤')
    st.markdown("""
    ### –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤
    """)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()

    # –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
    with st.sidebar:
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        selected_types = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –¥–µ—Ä–µ–≤—å–µ–≤',
            options=TYPE_COLORS.keys(),
            default=list(TYPE_COLORS.keys())
        )

        age_range = st.slider(
            '–î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞ (–ª–µ—Ç)',
            min_value=int(df['age'].min()),
            max_value=int(df['age'].max()),
            value=(20, 80)
        )

        crown_size = st.slider(
            '–ü–ª–æ—â–∞–¥—å –∫—Ä–æ–Ω—ã (–º¬≤)',
            min_value=float(df['crown_area'].min()),
            max_value=float(df['crown_area'].max()),
            value=(5.0, 30.0)
        )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df[
        (df['type'].isin(selected_types)) &
        (df['age'].between(*age_range)) &
        (df['crown_area'].between(*crown_size))
        ]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.metric("–í—Å–µ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ", filtered_df.shape[0])

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    st.subheader("–ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤")
    map_obj = create_map(filtered_df)
    st_folium(map_obj, width=1200, height=600)

    # –õ–µ–≥–µ–Ω–¥–∞
    st.markdown("### –õ–µ–≥–µ–Ω–¥–∞")
    cols = st.columns(len(TYPE_COLORS))
    for i, (tree_type, color) in enumerate(TYPE_COLORS.items()):
        cols[i].markdown(f"""
        <div style="display: flex; align-items: center;">
            <div style="width: 20px; height: 20px; background-color: {color}; margin-right: 10px;"></div>
            {tree_type}
        </div>
        """, unsafe_allow_html=True)

    # –ü–æ–∫–∞–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'):
        st.dataframe(filtered_df)
